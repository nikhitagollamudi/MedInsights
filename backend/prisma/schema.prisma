

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum ROLES {
  doctor
  insurer
  patient
}

enum THEMES {
  theme1
  theme2
}

enum STATUS {
  scheduled
  cancelled
  completed
}


model Users {
  userId             String              @id
  email              String              @unique
  firstName          String
  lastName           String
  phone              String
  address            String
  photo              Bytes
  theme              THEMES
  role               ROLES
  patients           Patients?
  doctors            Doctors?
  insuranceProviders InsuranceProviders?
}

model Patients {
  userId              String         @unique
  user                Users          @relation(fields: [userId], references: [userId])
  patientId           String         @id @default(uuid())
  medicalHistory      String?
  covid19Symptoms     Json
  subscribedProviders Int[]
  availedPlans        Int[]
  feedback            Feedback[]
  appointments        Appointments[]
}

model Doctors {
  userId               String         @unique
  user                 Users          @relation(fields: [userId], references: [userId])
  doctorId             String         @id @default(uuid())
  hospitalId           String         @unique
  hospitals            Hospitals      @relation(fields: [hospitalId], references: [hospitalId])
  specialization       String
  availabilitySchedule Json
  treatsCovid          Boolean
  feedback             Feedback[]
  appointments         Appointments[]
}

model InsuranceProviders {
  userId             String           @unique
  user               Users            @relation(fields: [userId], references: [userId])
  providerId         String           @id @default(uuid())
  providerName       String
  subscribedPatients Int[]
  insurancePlans     InsurancePlans[]
}

model Hospitals {
  hospitalId    String    @id @default(uuid())
  bedCount      Int
  occupiedCount Int
  location      Float[]
  doctors       Doctors[]
}

model Feedback {
  doctorId   String   @unique
  doctors    Doctors  @relation(fields: [doctorId], references: [doctorId])
  patientId  String   @unique
  patients   Patients @relation(fields: [patientId], references: [patientId])
  feedbackId String   @id @default(uuid())
  rating     Float
  review     String
}

model Appointments {
  doctorId            String   @unique
  doctors             Doctors  @relation(fields: [doctorId], references: [doctorId])
  patientId           String   @unique
  patients            Patients @relation(fields: [patientId], references: [patientId])
  appointmentId       String   @id @default(uuid())
  appointmentDateTime DateTime @default(now())
}

model InsurancePlans {
  providerId         String             @unique
  insuranceProviders InsuranceProviders @relation(fields: [providerId], references: [providerId])
  planID             String             @id @default(uuid())
  planName           String
  planDescription    String
  premiumCost        Decimal
  availedPatients    Int[]
}
